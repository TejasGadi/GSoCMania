import { Circle } from "./Circle";
import { Rectangle } from "./Rectangle";
import { getDistance } from "../../Utils/NumberUtils";
export class QuadTree {
    rectangle;
    capacity;
    _NE;
    _NW;
    _SE;
    _SW;
    _divided;
    _points;
    constructor(rectangle, capacity) {
        this.rectangle = rectangle;
        this.capacity = capacity;
        this._points = [];
        this._divided = false;
    }
    insert(point) {
        if (!this.rectangle.contains(point.position)) {
            return false;
        }
        if (this._points.length < this.capacity) {
            this._points.push(point);
            return true;
        }
        if (!this._divided) {
            this.subdivide();
        }
        return ((this._NE?.insert(point) ||
            this._NW?.insert(point) ||
            this._SE?.insert(point) ||
            this._SW?.insert(point)) ??
            false);
    }
    query(range, check, found) {
        const res = found ?? [];
        if (!range.intersects(this.rectangle)) {
            return [];
        }
        for (const p of this._points) {
            if (!range.contains(p.position) &&
                getDistance(range.position, p.position) > p.particle.getRadius() &&
                (!check || check(p.particle))) {
                continue;
            }
            res.push(p.particle);
        }
        if (this._divided) {
            this._NE?.query(range, check, res);
            this._NW?.query(range, check, res);
            this._SE?.query(range, check, res);
            this._SW?.query(range, check, res);
        }
        return res;
    }
    queryCircle(position, radius, check) {
        return this.query(new Circle(position.x, position.y, radius), check);
    }
    queryRectangle(position, size, check) {
        return this.query(new Rectangle(position.x, position.y, size.width, size.height), check);
    }
    subdivide() {
        const x = this.rectangle.position.x, y = this.rectangle.position.y, w = this.rectangle.size.width, h = this.rectangle.size.height, capacity = this.capacity;
        this._NE = new QuadTree(new Rectangle(x, y, w / 2, h / 2), capacity);
        this._NW = new QuadTree(new Rectangle(x + w / 2, y, w / 2, h / 2), capacity);
        this._SE = new QuadTree(new Rectangle(x, y + h / 2, w / 2, h / 2), capacity);
        this._SW = new QuadTree(new Rectangle(x + w / 2, y + h / 2, w / 2, h / 2), capacity);
        this._divided = true;
    }
}
